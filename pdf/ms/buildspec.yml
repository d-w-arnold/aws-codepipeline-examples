version: 0.2

# Requires the following Environment Variables set in either
#  build project (CodeBuild) or pipeline (CodePipeline):
#
# "AWS_ACCOUNT_ID" - The AWS account id (e.g. 123456789012)
# "AWS_DEFAULT_REGION" - The AWS region (e.g. eu-west-2)
# "ORGANISATION" - The organisation of docker image (e.g. foobar)
# "PROJECT_NAME" - The docker image name (e.g. dog-gw, dog-gw-base, etc.)
# "IMAGE_TAG" - The deployment tag of the docker image (e.g. dev, staging, etc.)
# "BASE_PROJECT_NAME" - The docker image name (e.g. dog-gw, dog-gw-base, etc.)
# "BASE_IMAGE_TAG" - The deployment tag of the docker image (e.g. dev, main, etc.)
# "LAMBDA_FUNC_SOURCE" - Relative path to the Lambda function source code folder (e.g. "./pdf/S3HandlerPdfMs")
# "S3HANDLER_UPDATE_FUNCTION" - The name of the Lambda function which will deploy the built container image.
# "LAMBDA_FUNC_NAMES" - The names of the Lambda functions which need the built container image.

phases:
  pre_build:
    commands:
      - echo "Defining image repo props..."
      - IMAGE_REPO="${ORGANISATION}/${PROJECT_NAME}"
      - IMAGE_REPO_TAG="${IMAGE_REPO}:${IMAGE_TAG}"
      - echo "Logging in to Amazon ECR..."
      - REPO_URI="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
      - aws ecr get-login-password --region "${AWS_DEFAULT_REGION}" | docker login --username AWS --password-stdin "${REPO_URI}"
      - IMAGE_URI="${REPO_URI}/${IMAGE_REPO_TAG}"
  build:
    commands:
      - echo "Build started on $(date)"
      - echo "Building the ${IMAGE_REPO_TAG} image..."
      - |
        docker build --no-cache -f pdf/S3HandlerPdfMs.Dockerfile -t "${IMAGE_URI}" \
        --build-arg BASE_IMG_NAME="${REPO_URI}/${ORGANISATION}/${BASE_PROJECT_NAME}" \
        --build-arg BASE_IMG_TAG="${BASE_IMAGE_TAG}" \
        --build-arg LAMBDA_FUNC_SOURCE="${LAMBDA_FUNC_SOURCE}" \
        .
  post_build:
    commands:
      - echo "Build completed on $(date)"
      - echo "Pushing the ${IMAGE_REPO_TAG} image to Amazon ECR..."
      - docker push "${IMAGE_URI}"
      - |
        PAYLOAD=$(jq --null-input \
        --arg imageuri "${IMAGE_URI}" \
        --arg lambdafuncnames "${LAMBDA_FUNC_NAMES}" \
        '{"image-uri": $imageuri, "lambda-func-names": $lambdafuncnames}')
      - printf "Payload:\n%s\n" "${PAYLOAD}"
      - OUTPUT_TXT="output.txt"
      - aws lambda invoke --function-name "${S3HANDLER_UPDATE_FUNCTION}" --payload "$(echo "${PAYLOAD}" | base64)" "${OUTPUT_TXT}"
      - OUTPUT=$(cat "${OUTPUT_TXT}")
      - printf "Lambda function output:\n%s\n" "${OUTPUT}"
      - echo "Writing image definitions file..."
      - printf '[{"imageUri":"%s"}]' "${IMAGE_URI}" > imagedefinitions.json
artifacts:
  files: imagedefinitions.json
